#include <iostream>
#include <cmath>
using namespace std;

int main(){

    int board[9][9] ={{-1,-1,-1,-1,-1,-1,-1,-1,-1}, 
                      {-1,-1,-1,-1,-1,1,-1,-1,-1},
                      {-1,1,-1,-1,1,-1,-1,-1,-1},
                      {-1,-1,-1,-1,-1,2,1,2,-1},
                      {-1,1,-1,1,-1,-1,-1,-1,-1},
                      {-1,-1,-1,-1,1,2,-1,-1,-1},
                      {1,-1,2,-1,-1,-1,-1,1,-1},
                      {-1,-1,-1,-1,-1,1,-1,2,-1},
                      {-1,-1,1,-1,-1,-1,-1,-1,-1}};
    int dp[9][9]; // dp의 의미는 한 위치에서 가장 큰 값을 가지도록 유도
    // 초기값을 세팅합니다. 0 번째행
    dp[0][0] =0;
    dp[0][1] =0;
    dp[0][2] =0;
    dp[0][3] =0;
    dp[0][4] =0;
    dp[0][5] =0;
    dp[0][6] =0;
    dp[0][7] =0;
    dp[0][8] =0;
    // 초기값을 세팅합니다. 1 번째행
    dp[1][0] =0;
    dp[2][0] =0;
    dp[3][0] =0;
    dp[4][0] =0;
    dp[5][0] =0;
    dp[6][0] =0;
    dp[7][0] =1;
    dp[8][0] =1;


    for(int i=1; i<9; i++){
        for(int j=1; j<9; j++){
            if(board[i][j] == 1){
                //더해준다
                // 둘중 더 큰값을 더해준다.

                dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
                // 1을 더한다.
                dp[i][j] +=1;
            }else if(board[i][j] == 2){
                //dp를 0으로 만든다
                dp[i][j] = 0;
            }else{
                // -1인 상황으로 더하지는 않는다.
                dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
            }
        }
    }

    for(int i=8; i>=0; i--){
        for(int j=0; j<9; j++){
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }

    cout <<"쥐가 최대한 많이 먹을 수 있는 치즈의 개수는 : " <<dp[8][8] <<endl;
}